@Author : Alexandre Behling        - 13200626
@Author : Gustavo Tarciso da Silva - 14100833


Documentation for X3

void Statistic::addValue(double value)
	Inserts a new data and calculate the statistics

void Statistic::clear()
	Clear all statistics data

unsigned int Statistic::numElements()
	Returns the number of data inputed

double Statistic::min()
	Returns the minimum value added until that time

double Statistic::max()
	Returns the maximum value added until that time

double Statistic::average()
	Returns the average value added until that time

double Statistic::variance()
	Returns the variance of the inputed data

double Statistic::stddeviation() 
	Returns the standard deviation of the inputed data

double Statistic::variationCoef()
	Returns the variation coefficient of the inputed data
	Thats is the standard deviation divided by the average value

double Statistic::halfWidthConfidenceInterval(double confidencelevel)
	Given the confidence level desired, in a range from 0 < x < 1,
	returns the half width confidence interval

unsigned int Statistic::newSampleSize(double confidencelevel, double halfWidth)
	Given the confidence level, in a range from 0 < x < 1, and the half width of 
	the confidence interval desired, returns the an n, that would satisface the half 
	width of the confidence interval with the given standard deviation.

double Statistic::erf_inv(double p) 
	

double Statistic::calculateZ(double confidencelevel)
	Returns the positive value of Z, given the confidence level desired, from a range of
	0 < x < 1.

Calculation of the Statistics

Average:
	The average is calculated by using a variable called avg_sum, which stores the sum of
	 all the inputs, and is divided by number of inputs.

Variance: 
	The variance is calculate by storing the sum of the square from every inputed data,
	then the variance is calculated by the formula [sum(xi²) - sum(xi)²/n]/n-1.

We are storing the sum of the input data and the sum of the squares of this data in long 
double variables called _avg_sum and _variance_sum, then we use this values to get the mean
and variance dividing those values by n, as the formulas in reference[1], and this allow us
avoid such problems as overflow and error propagation. In our case, we could use the 
formula final form, allowing us to avoid overflow without use long doubles, but it causes
much error propagation, being impracticable. The error propagation in this second scenario
would occur due to many divisions instead of only one, and then causing a lot number 
roundings.

By storing the sum, the mean only needs 3 operations to be updated, increments the n, adds 
the value to the sum, and then divides the sum by the new n. This way no error is propagated 
by the previous means. 

Following this way, the calculation of the variance also uses the sums to avoid error.
The formula is a derivation from the original sample variance formula, the steps can be 
seen on reference[2].

To keep track of the minimum and maximum values in the sample, we store them in variables 
_min and _max, and once the object is constructed or the method clear() is called, those 
values are set to numeric_limits<double>::min() and numeric_limits<double>::max(), setting 
those variables to minimum and maximum values a double variable could assume. We use this to 
make the first value inserted be the minimum and maximum value at the same time, initializing 
them and with no need of check if any value added later is the first value in the sample 
everytime the function addValue() is called.

The coefficient of variation is calculated following the reference[3], with a simple division 
of the standard of deviation by the sample mean.



References:
[1] - http://datagenetics.com/blog/november22017/index.html
[2] - https://www.thoughtco.com/sum-of-squares-formula-shortcut-3126266.
[3] - https://pt.wikipedia.org/wiki/Coeficiente_de_varia%C3%A7%C3%A3o
[4] - http://csg.sph.umich.edu/abecasis/gas_power_calculator/algorithm-as-241-the-percentage-points-of-the-normal-distribution.pdf
[5] - https://en.wikipedia.org/wiki/Normal_distribution#Quantile_function


